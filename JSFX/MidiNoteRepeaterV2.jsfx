/*
MIDI Note Beat Repeater Mod by xup
JS Plugin by RCJacH Oct 2016
Blog: RCJacH.lofter.com
Github: github.com/RCJacH/ReaperScript
Version: 1.1
Reference: 
  MIDI Note Repeater
  Native Instrument Maschine

Description:
  This script is made to emulate the note repeating function in Native Instrument Maschine hardware.
  I have never used Maschine myself, thus I do not know how it really works.
  However, I did watch some video that demonstrated great workflow for inputting hihat patterns.

How to use:
  You can use this script in two ways:
  1. Insert as an input FX of your track. Assign MIDI CCs to all of the parameters, trigger slider11(On/Off) and press a note,
    the pressed note will repeat itself at an interval set using slider1(Rate), while slider2(Type) determines the type of
    rhythm it generates.
  2. Insert as a normal FX before your sampler. Write the trigger note for the desired sample, and use envelop to control
    the parameters. You can even insert another track and record MIDI output of the original track, which allows you to
    edit the generated pattern.
  The Normal Type Lock slider(3) is great for drill type patterns where you have a steady 8th note groove with occasional
    8th or 16th note triplet variations. This setting will free you from constantly alternating the type slider from triplet
     to normal.
  Channel Pressure is used to vary the velocity of repeated notes: output Velocity = Channel Pressure.

Changelog:
 * v1.1 (2016-10-09)
  + Renamed
  + Added Gate Function (Note Length)
  + Added Sync to grid function
  # Fixed Note On accuracy
 * v1.0 (2016-07-24)
  + Initial Release

Potential Addition:
  1. Velocity and Timing Humanization
  2. Aftertouch %.
  3. Native CC sliders.
  4. Work with pause play_state.
  
C - > 1/4
D - > 1/8
E - > Retrigger
F - > 1/16
G - > 1/32
A - > 1/64

C# - > 1/4T
D# - > 1/8T
F# - > 1/16T
G# - > 1/32T
A# - > 1/64T

B -> Trigger D

*/

desc:MIDI Note Beat Repeater
//tags: MIDI processing

// slider1:5<0,9,1{4,2,1,1/2,1/4,1/8,1/16,1/32,1/64,1/128}>Rate (fraction of whole note)
// slider2:0<0,2,1{NORMAL,TRIPLET,DOTTED}>Type
slider1:2<0,3,1{C-1,C0,C1,C2}> Start Note
// slider3:2<0,4,1{off,1/2,1/4,1/8,1/16}> Normal Type lock
slider4:0<0,127,1> Aftertouch
slider5:100<10,100,10> Gate
slider10:1<0,1,1{Off,On}> Sync to Beat
slider11:1<0,1,1{Off,On}> On/Off


in_pin:none
out_pin:none

@init
// Constants from the MIDI specification:
NUM_CHANNELS            = 16;
NUM_NOTES               = 128;

STATUS_NOTE_ON          = $x90; // Note On Message
STATUS_NOTE_OFF         = $x80; // Note Off Message
STATUS_AFTERTOUCH       = $xA0; // AfterTouch Message
STATUS_CC               = $xB0; // Control Change Message
STATUS_CHANNEL_PRESSURE = $xD0; // Channel Pressure Message
STATUS_PITCH_WHEEL      = $xE0; // Pitch Wheel Message

i_noteCnt               = 0;
i_AT                    = 0;
active                  = 0;

// rate as integer of a beat
i_div =1;

// List of notes that are pressed
i_NotesPressedBit = 2; //Channel, Vel
a_NotesPressed    = 0;
memset(a_NotesPressed,0, NUM_NOTES * i_NotesPressedBit);

// List of notes that have sent Note On MIDI information
i_NotesOutBit     = 3; //Channel, Pit, Vel
a_NotesOut        = a_NotesPressed + NUM_NOTES * i_NotesPressedBit;
memset(a_NotesOut, 0, NUM_NOTES * i_NotesOutBit);


@slider
i_noteStart = 12*slider1;
// Return to even notes from triplet if division is equal to slider3 value
// slider3 ? i_divlock = 2 / (2 ^ (slider3 - 1)):16;
i_AT = slider4;
i_gate = slider5 / 100;
b_sync = slider10;
on = slider11;


@block

while(midirecv(offset,msg1,msg2,msg3)) (
  // Break up the MIDI message into its component parameters.
  in_ch = msg1 & $x0F;
  in_type = msg1 & $xF0;
  in_pit = msg2;
  in_vel = msg3;
  block = 0;

  pitch_diff = in_pit - i_noteStart;
  (pitch_diff >= 0 && pitch_diff < 12) ? (
    // white key C D E F G 
    pitch_diff == 0 ? (
      // Normal 1/4
      s1 = 4;
      s2 = 0;
    );
    pitch_diff == 2 ? (
      // Normal 1/8
      s1 = 5;
      s2 = 0;
    );
    pitch_diff == 5 ? (
      // Normal 1/16
      s1 = 6;
      s2 = 0;
    );
    pitch_diff == 7 ? (
      // Normal 1/32
      s1 = 7;
      s2 = 0;
    );
    pitch_diff == 9 ? (
      // Normal 1/64
      s1 = 8;
      s2 = 0;
    );

    // black key
    pitch_diff == 1 ? (
      // Abnormal 1/4
      s1 = 4;
      s2 = 1;
    );
    pitch_diff == 3 ? (
      // Abnormal 1/8
      s1 = 5;
      s2 = 1;
    );
    pitch_diff == 6 ? (
      // Abnormal 1/16
      s1 = 6;
      s2 = 1;
    );
    pitch_diff == 8 ? (
      // Abnormal 1/32
      s1 = 7;
      s2 = 1;
    );
    pitch_diff == 10 ? (
      // Abnormal 1/64
      s1 = 8;
      s2 = 1;
    );
    pitch_diff == 11 ? (
      // D
      s2 = 2;
    );

    // rate as integer of a beat
    i_div = (16/(2 ^ s1));
    // Triplet or Normal
    // s2 == 1 ? i_div < i_divlock ? i_div *= 2/3;
    s2 == 1 ? i_div *= 2/3;
    // Dotted
    s2 == 2 ? i_div *= 3/2;
    i_divGate = i_div * i_gate;
  );
  

  (in_type == STATUS_NOTE_ON || in_type == STATUS_NOTE_OFF) ? (
    in_type == STATUS_NOTE_ON ? samplesTrigger = offset;
    i_noteCnt += (in_type == STATUS_NOTE_ON && in_vel > 0) ? 1:-1;
    a_NotesPressed[in_pit*i_NotesPressedBit] = in_ch;
    a_NotesPressed[in_pit*i_NotesPressedBit + 1] = in_vel;
    block = on ? 1:0;
    // Pressed Note are blocked if script is active.
  ); // Note ON/OFF

  (in_type == STATUS_CHANNEL_PRESSURE) ? (
    i_AT = in_pit;
    slider4 = i_AT;
    block = 1; // Do not output Channel Pressure
  );
  // Pass Original MIDI Data
  !block?midisend(offset, msg1, msg2, msg3);

); //while MIDI in

// Calculate Repeated Notes
i_noteCnt && on ? (
  // If keys are pressed while triggered
  b_syncChk = b_sync && (play_state&1 || play_state&5) ? 1 : 0;
  // rate to sample
  samples_per_beat = srate * 60 / tempo;
  beats_per_sample = ( tempo / 60 ) / srate;
  beats_per_block = samplesblock * beats_per_sample;
  div_next_block = floor((beat_position + beats_per_block) / i_div);
  div_this_block = floor((beat_position) / i_div);
  i_divSample = i_div * samples_per_beat;
  
  // Check if Note-On trigger happens in this samplesblock based on sync/play setting
  b_onTrigger = b_syncChk ? (
    beat_position == 0 || div_next_block > div_this_block ? 1 : 0;
    ) : (
    samplesTrigger < samplesblock || floor((samplesTrigger + samplesblock) / i_divSample) > floor(samplesTrigger / i_divSample) ? 1 : 0;
  );

  // If note(s) is already being triggered
  active ? (
    b_offTrigger = b_syncChk ? ( 
      beat_position + beats_per_block > active_pos + i_divGate ? 1 : 0;
      ):(
      (samplesTrigger + samplesblock) % i_divSample > i_divSample * i_gate ? 1 : 0;
    );
    b_offTrigger ? (
      ofs = b_syncChk ? (active_pos + i_divGate - beat_position) * samples_per_beat : 
      i_divSample * i_gate - samplesTrigger % i_divSample;
      // Note-Off all pressed notes
      loopOut = 0; loop(active,
        a_NotesOut[loopOut + 2] ? (
          outCh = a_NotesOut[loopOut];
          outPit = a_NotesOut[loopOut + 1];
          pitch_diff_tmp = outPit - i_noteStart;
          (pitch_diff_tmp < 0 || pitch_diff_tmp >= 12) ? (
            midisend(ofs, STATUS_NOTE_OFF|outCh, outPit);
          );
        );
        loopOut += i_NotesOutBit;
      ); // loopOut 
      active = 0;
    ); //offTrigger
  ); //active?

  // If Note-On triggers
  b_onTrigger ? (
    ofs = b_syncChk ? (ceil(beat_position / i_div) * i_div - beat_position) * samples_per_beat :
      ceil(samplesTrigger / i_divSample) * samples_per_beat - samplesTrigger;
    // Note-On all pressed notes
    loopPit = 0; loopOut = 0; loop(NUM_NOTES,
      outCh = a_NotesPressed[loopPit];
      outPit = loopPit/i_NotesPressedBit;
      outVel = a_NotesPressed[loopPit + 1];
      outVel ? (
        i_AT ? outVel = i_AT;
        pitch_diff_tmp = outPit - i_noteStart;
        (pitch_diff_tmp < 0 || pitch_diff_tmp >= 12) ? (
          midisend(ofs, STATUS_NOTE_ON|outCh, outPit, outVel);
        );
        a_NotesOut[loopOut] = outCh;
        a_NotesOut[loopOut + 1] = outPit;
        a_NotesOut[loopOut + 2] = outVel;
        loopOut += i_NotesOutBit;
        active += 1;
      ); //outVel
      loopPit += i_NotesPressedBit;
    ); //loopPit
    // Mark position of last Note-On
    active_pos = beat_position + ofs * beats_per_sample;
  ); // b_onTrigger
  samplesTrigger += samplesblock;
); //on


active && (!i_noteCnt || !on) ? (
  loopOut = 0; loop(active,
    a_NotesOut[loopOut + 2] ? (
      outCh = a_NotesOut[loopOut];
      outPit = a_NotesOut[loopOut + 1];
      pitch_diff_tmp = outPit - i_noteStart;
      (pitch_diff_tmp < 0 || pitch_diff_tmp >= 12) ? (
        midisend(0, STATUS_NOTE_OFF|outCh, outPit);
      );
    );
    loopOut += i_NotesOutBit;
  ); // loopOut 
  memset(a_NotesOut, 0, NUM_NOTES * i_NotesOutBit);
  active = 0;
); //active
